#####################################################################
#	Macros
#####################################################################
[include klipper-maintenance-tracker-macro.cfg]
[include idex.cfg]
[include pidutilities.cfg]
[include testspeed.cfg]
[include LoadUnloadFilament.cfg]

############################################################
### VARIABLE DECLARATIONS ###
############################################################
[gcode_macro _ECHO_LNLOS]
description: Echo LNLOS variables to console
gcode: 
  {% for var, value in printer["gcode_macro LNLOS"].items() %}
    {action_respond_info(var ~": "~ value)}
  {% endfor %}
  RESPOND TYPE=echo MSG="-----END OUTPUT LNLOS VARS-----"

[gcode_macro LNLOS]
description: LNLOS variable storage macro, echos variables when run
#probe pickup and dropoff variables
variable_probe_pickup_zraise: 20
variable_probe_pickup_xpos: 25
variable_probe_pickup_ypos: 310
variable_probe_pickup_zpos: 2
#pid ALL variables
variable_extruder_pid_target: 200
variable_bed_pid_target: 60
#idex variables
variable_copy_mode_xoffset: 150
variable_mirror_mode_xoffset: 300
variable_idex_x_offset: 6.15
variable_idex_y_offset: 0
variable_idex_z_offset: 0
#z caliberate helper variables
variable_z_calibrate_x: 150
variable_z_calibrate_y: 150
variable_z_calibrate_zlift: 20
#maintenance tracker variables
variable_total_print_time: 0
variable_last_extruder_change: 0
variable_last_cleaning: 0
variable_last_dimension_calibration: 0
gcode: 
  _ECHO_LNLOS


[gcode_macro SAVE_LNLOS]
description: Saves LNLOS Variable Data To file
gcode: 
  RESPOND MSG="SAVING LNL OS VARIABLES"
  {% set svlnl = printer["gcode_macro LNLOS"] %}
  SAVE_VARIABLE VARIABLE=probe_pickup_zraise VALUE={svlnl.probe_pickup_zraise}
  SAVE_VARIABLE VARIABLE=probe_pickup_xpos VALUE={svlnl.probe_pickup_xpos}
  SAVE_VARIABLE VARIABLE=probe_pickup_ypos VALUE={svlnl.probe_pickup_ypos}
  SAVE_VARIABLE VARIABLE=probe_pickup_zpos VALUE={svlnl.probe_pickup_zpos}
  SAVE_VARIABLE VARIABLE=extruder_pid_target VALUE={svlnl.extruder_pid_target}
  SAVE_VARIABLE VARIABLE=bed_pid_target VALUE={svlnl.bed_pid_target}
  SAVE_VARIABLE VARIABLE=copy_mode_xoffset VALUE={svlnl.copy_mode_xoffset}
  SAVE_VARIABLE VARIABLE=mirror_mode_xoffset VALUE={svlnl.mirror_mode_xoffset}
  SAVE_VARIABLE VARIABLE=idex_x_offset VALUE={svlnl.idex_x_offset}
  SAVE_VARIABLE VARIABLE=idex_y_offset VALUE={svlnl.idex_y_offset}
  SAVE_VARIABLE VARIABLE=idex_z_offset VALUE={svlnl.idex_z_offset}
  SAVE_VARIABLE VARIABLE=z_calibrate_x VALUE={svlnl.z_calibrate_x}
  SAVE_VARIABLE VARIABLE=z_calibrate_y VALUE={svlnl.z_calibrate_y}
  SAVE_VARIABLE VARIABLE=z_calibrate_zlift VALUE={svlnl.z_calibrate_zlift}
  SAVE_VARIABLE VARIABLE=total_print_time VALUE={svlnl.total_print_time}
  SAVE_VARIABLE VARIABLE=last_extruder_change VALUE={svlnl.last_extruder_change}
  SAVE_VARIABLE VARIABLE=last_cleaning VALUE={svlnl.last_cleaning}
  SAVE_VARIABLE VARIABLE=last_dimension_calibration VALUE={svlnl.last_dimension_calibration}

[gcode_macro _LOAD_LNLOS]
gcode:
  RESPOND MSG="Loading LNL OS Vars..."
  {% set svlnl = printer.save_variables.variables %}
  SET_GCODE_VARIABLE MACRO=LNLOS VARIABLE=probe_pickup_zraise VALUE={svlnl.probe_pickup_zraise|float|default(20)}
  SET_GCODE_VARIABLE MACRO=LNLOS VARIABLE=probe_pickup_xpos VALUE={svlnl.probe_pickup_xpos|float|default(25)}
  SET_GCODE_VARIABLE MACRO=LNLOS VARIABLE=probe_pickup_ypos VALUE={svlnl.probe_pickup_ypos|float|default(310)}
  SET_GCODE_VARIABLE MACRO=LNLOS VARIABLE=probe_pickup_zpos VALUE={svlnl.probe_pickup_zpos|float|default(2)}
  SET_GCODE_VARIABLE MACRO=LNLOS VARIABLE=extruder_pid_target VALUE={svlnl.extruder_pid_target|float|default(200)}
  SET_GCODE_VARIABLE MACRO=LNLOS VARIABLE=bed_pid_target VALUE={svlnl.bed_pid_target|float|default(60)}
  SET_GCODE_VARIABLE MACRO=LNLOS VARIABLE=copy_mode_xoffset VALUE={svlnl.copy_mode_xoffset|float|default(150)}
  SET_GCODE_VARIABLE MACRO=LNLOS VARIABLE=mirror_mode_xoffset VALUE={svlnl.mirror_mode_xoffset|float|default(300)}
  SET_GCODE_VARIABLE MACRO=LNLOS VARIABLE=idex_x_offset VALUE={svlnl.idex_x_offset|float|default(6.15)}
  SET_GCODE_VARIABLE MACRO=LNLOS VARIABLE=idex_y_offset VALUE={svlnl.idex_y_offset|float|default(0)}
  SET_GCODE_VARIABLE MACRO=LNLOS VARIABLE=idex_z_offset VALUE={svlnl.idex_z_offset|float|default(0)}
  SET_GCODE_VARIABLE MACRO=LNLOS VARIABLE=z_calibrate_x VALUE={svlnl.z_calibrate_x|float|default(150)}
  SET_GCODE_VARIABLE MACRO=LNLOS VARIABLE=z_calibrate_y VALUE={svlnl.z_calibrate_y|float|default(150)}
  SET_GCODE_VARIABLE MACRO=LNLOS VARIABLE=z_calibrate_zlift VALUE={svlnl.z_calibrate_zlift|float|default(20)}
  SET_GCODE_VARIABLE MACRO=LNLOS VARIABLE=total_print_time VALUE={svlnl.total_print_time|float|default(0)}
  SET_GCODE_VARIABLE MACRO=LNLOS VARIABLE=last_extruder_change VALUE={svlnl.last_extruder_change|float|default(0)}
  SET_GCODE_VARIABLE MACRO=LNLOS VARIABLE=last_cleaning VALUE={svlnl.last_cleaning|float|default(0)}
  SET_GCODE_VARIABLE MACRO=LNLOS VARIABLE=last_dimension_calibration VALUE={svlnl.last_dimension_calibration|float|default(0)}
  LNLOS


############################################################
### MACHINE STARTUP ###
############################################################

[delayed_gcode _INITIALIZE]
initial_duration: 1
gcode:
  RESPOND TYPE=echo MSG="Initializing..."
  LNLOS
  _LOAD_LNLOS
  _BED_MESH_INIT
  #_CHECK_IF_PROBE_INSTALLED

[gcode_macro _BED_MESH_INIT]
gcode:
  RESPOND TYPE=echo MSG="Loading Default Bedmesh"
  BED_MESH_PROFILE LOAD=default


############################################################
### PRINT START AND END ###
############################################################

### ------------------------------ ###
[gcode_macro PRINT_START]
gcode:
    _CHECK_IF_PROBE_INSTALLED
    CLEAR_PAUSE
      {% if printer["gcode_macro bedmesh"].probe_installed != 0 %}
        RESPOND TYPE=error MSG="You could have a probe still on. Please Make Sure probe docked and restart print"
	      CANCEL_PRINT
      {% endif %}
      # define extruder and bed temps
      {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
      {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(200)|float %}
      # {% set BED = params.BED|default(60)|float %}
      # {% set EXTRUDER = params.EXTRUDER|default(190)|float %}
      # use absolute coords
      G90
      # extruder relative mode
      M83
      # perform homing and QGL
      HOME_IF_NOT

      # Set extruder and Bed Temp
      M104 S{EXTRUDER_TEMP}
      {% if printer["gcode_macro _IDEX_MODE"].idex_mode != 0 %}
        M104 T1 S{EXTRUDER_TEMP}
      {% endif %}
      M140 S{BED_TEMP}
      M117 Waiting for temp...

      # park toolhead in center front
      # G1 Z50
      # wait for temps
      M190 S{BED_TEMP}
      M109 S{EXTRUDER_TEMP}
      {% if printer["gcode_macro _IDEX_MODE"].idex_mode != 0 %}
        M109 T1 S{EXTRUDER_TEMP}
      {% endif %}
      M117 Temp Reached   
      _RESTORE_IDEX_MODE
      # QGL
      #M117 Performing QGL
      # QUAD_GANTRY_LEVEL
      #M117 Performing BML
      #BED_MESH_CALIBRATE
      # Second G28 just for 
      _PRIME_LINE
      M117 Printing...

### ------------------------------ ###
[gcode_macro END_PRINT]
gcode:
  #MAINTENANCE_TRACKER
  M117 End printing.
  RESPOND MSG="End printing"
  G91 ; relative positioning
  G1 E-1 F300 ;retract the filament a bit before lifting the nozzle to release some of the pressure
  G1 Z+5 E-2 F1000 ;move Z up a bit and extract a bit more
  # T1
  #	T0
  # G90 ; absolute positioning
  # G0 Y220 F6000 ; make the printed object accessible
  m104 S0 T0 ; turn hotend heating off
  m104 S0 T1 ; turn hotend heating off
  M140 S0 ; turn hotbed heating off
  G90
  SET_DUAL_CARRIAGE CARRIAGE=0
  #G0 X70 Y140 F5000
  G28 X
  SET_DUAL_CARRIAGE CARRIAGE=1
  #G0 X170 F5000
  G28 X
  G1 Y305 F6000 ; Present build plate for completed print
  M106 S255 ; turn fan on for cooling
  M84 ; steppers off
  _clear_stepper_x_range
  M117 Cooling Down
  RESPOND MSG="Fans Cooling For 3 Mins"
  G4 P180000 ;keep fans on for 3 minutes
  RESPOND MSG="Fans Turning Off"
  M106 S0 ; turn fan off

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE
  G1 Z+2 F1050
  G28 X
  G1 Y300 F6000


### ------------------------------ ###
[gcode_macro _PRIME_LINE]
gcode: 
  RESPOND MSG="Printing a priming line "

  {% set x = params.X|default(2)|float %}
  {% set y = params.Y|default(70)|float %}
  {% set z = params.Z|default(0.2)|float %}
  {% set xline = params.XLINE|default(0.8)|float %}
  {% set yline = params.YLINE|default(120)|float %}
  {% set eMultiplier = 0.15 * z  %}
  SAVE_GCODE_STATE NAME=_prime_line
  M117 Prime Line
  G90 ; XYZ to abs mode
  M83 ; set E to rel mode
  # move z axis 
  G1 Z0.3 F3000 ;Move Z Axis up
  # move to prime position 
  G0 Y{y} Z{z}
  G0 X{x} ;Move to start position. Do a square move to avoid hitting the bed's corner clips
  G1 Y{y + yline} E{eMultiplier * yline} ;Draw the first line
  G1 X{x + xline} E{eMultiplier * xline} ;Move to side a little
  G1 Y{y + 20} E{eMultiplier * (yline - 20)} ;Draw the second line, but do not go back to origin to avoid picking the wipeouts
  #	G1 E-0.5 F300
  G1 Z0.5 F3000 ;Move Z Axis up
  RESTORE_GCODE_STATE NAME=_prime_line




############################################################
### TEMPS ###
############################################################

### ------------------------------ ###
[gcode_macro _wait_for_temperatures]
gcode:   
	# Wait for temps. If a target is zero, it will not be waited, actually. So you cannot extrude with very low temperatures :)
  M190 S{printer.heater_bed.target}
  M109 T0 S{printer.extruder.target}
	M109 T1 S{printer.extruder1.target}

### ------------------------------ ###
[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}

############################################################
### PROBE CORE ###
############################################################

### ------------------------------ ###
[gcode_macro PREP_Z_CALIBRATE]
description: Moves print head to a center of bed location
gcode:
  RESPOND TYPE=echo MSG="Moving Toolhead to position to perform Z calibrations"
  {% set xpos = printer["gcode_macro LNLOS"].z_calibrate_x|float %}
  {% set ypos = printer["gcode_macro LNLOS"].z_calibrate_y|float %}
  {% set zpos = printer["gcode_macro LNLOS"].z_calibrate_zlift|float %}
  HOME_IF_NOT
  G1 Z{zpos} F1050
  G1 X{xpos} Y{ypos} F12000
  RESPOND TYPE=echo MSG="Toolhead in position, ready to calibrate endstop or probe offset"

### ------------------------------ ###
[gcode_macro PROBEON]
gcode:
	SET_GCODE_VARIABLE MACRO=bedmesh VARIABLE=probe_installed VALUE=1
	RESPOND MSG="Recorded that probe is currently attached"

### ------------------------------ ###
[gcode_macro probeoff]
gcode:
	SET_GCODE_VARIABLE MACRO=bedmesh VARIABLE=probe_installed VALUE=0
	RESPOND MSG="Recorded that probe has been removed"

############################################################
### BED MESH ###
############################################################
### ------------------------------ ###
#[gcode_macro bed_mesh_calibrate]
#rename_existing: BED_MESH_CALIBRATE_BASE
#gcode:
#  {% if printer["gcode_macro bedmesh"].probe_installed == 1 %}
#      BED_MESH_CALIBRATE_BASE
#  {% elif printer["gcode_macro bedmesh"].probe_installed == 0  %}
#      RESPOND TYPE=error MSG="Probe does not seem to be installed, please install probe and rerun bedmesh"
#  {% endif %}

[gcode_macro bedmesh]
variable_probe_installed: 0
gcode:
  {% if printer["gcode_macro bedmesh"].probe_installed == 0 %}
	    RESPOND MSG="Install probe and run then command 'probeon'"
	{% else %}
		RESPOND MSG="Measuring bed mesh with TO, with zero x offset "
		HOME_IF_NOT
		T0
		SAVE_GCODE_STATE NAME=bedmesh
		#Always measure with raw left head
		G90
		SET_GCODE_OFFSET X=0 Y=0
		G0 Z10 F6000
		BED_MESH_CALIBRATE
		G0 Y0 Z100
		G28 X
		RESTORE_GCODE_STATE NAME=bedmesh
	{% endif %}

### ------------------------------ ###
[gcode_macro BED_MESH_LOAD]
description: Load an existing bed calibration mesh for the correct temperature
gcode:
  ##### get target get temperature #####
  {% set bed_temp = printer.heater_bed.target|int %}
  ##### join everything to a single mesh name #####
  {% set mesh_name = "MESH-" + bed_temp|string + "C" %}
  ##### end of definitions #####
  {% if printer.configfile.config["bed_mesh " + mesh_name] is defined %}
    BED_MESH_PROFILE LOAD={mesh_name}
    RESPOND TYPE=echo MSG="Loaded bed mesh profile of {mesh_name} "
  {% else %}
    RESPOND TYPE=error MSG="Did not find a mesh profile of {mesh_name} "
  {% endif %}

### ------------------------------ ###
[gcode_macro BEDMESH_RENEW]
gcode:
	home_if_not
	{% set dwell = 120000 %}
	{% for t in  [55,60,65,70,75,80,85] %}
    {% set mesh_name = "MESH-" + t|string + "C" %}
		RESPOND MSG="Heating the bed to {t} C"
		M190 S{t}
		RESPOND MSG="Settling for {dwell}ms"
		G4 P{dwell}
		bedmesh
		BED_MESH_PROFILE SAVE={mesh_name}
	{% endfor %}
	SAVE_CONFIG

############################################################
### HOMING AND PARKING ###
############################################################

### ------------------------------ ###
# home unit if not already, if homed will not move any axis
[gcode_macro HOME_IF_NOT]
gcode:
	{% if printer.toolhead.homed_axes != 'xyz' %}
	  G28
  {% endif %}

### ------------------------------ ###
[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
gcode:
  G91
  G0 Z25

### ------------------------------ ###
[gcode_macro _set_stepper_x_range]
variable_xoffset: 0
variable_range_set: 0
gcode:
  RESPOND MSG="Setting leftmost extruder x-axis origin"
  #	{ action_respond_info("Extruder1 temperature target: %s" % printer.extruder1.target ) }
	RESPOND MSG="Extruder1 temperature target: { printer.extruder1.target }"
	{% if   printer.extruder1.target|int > 0 %}
 		RESPOND MSG="Right hand side extruder active"
	    #{% set offset= 17 %}
	    {% set offset= 0 %} #I don't know why it was setting this to 17, but it was messing up my prints sometimes!
	{% else %}
	    {% set offset=0 %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=_set_stepper_x_range VARIABLE=xoffset VALUE={offset}
	RESPOND MSG="X origin for left head will be set to {offset} mm from left end of bed"
	#make it known that the range has been set for this print, and should not be re-evaluated again
	SET_GCODE_VARIABLE MACRO=_set_stepper_x_range VARIABLE=range_set VALUE=1

### ------------------------------ ###
[gcode_macro _clear_stepper_x_range]
gcode:
  RESPOND MSG="Clearing the leftmost extruder x-axis printing range"
	SET_GCODE_VARIABLE MACRO=_set_stepper_x_range VARIABLE=xoffset VALUE=0
	#make it known that the range has not been set for this print, and should be re-evaluated again
	SET_GCODE_VARIABLE MACRO=_set_stepper_x_range VARIABLE=range_set VALUE=0

############################################################
### GENERAL UTILITY ###
############################################################

### ------------------------------ ###
#moves toolhead to a maintenance position
#todo: improve overall, allow input of specific extruder
[gcode_macro MAKE_EXTRUDER_ACCESSIBLE]
gcode:
  G28
  G91
  G1 Z+100 F1000
  T0
  G1 X+150 F1750
  #T1
  #G1 X-150 F1750
  G90


[gcode_macro M601]
description: Call Pause if M601 gcode is used 
gcode:
  PAUSE


############################################################
### VARIABLES ###
############################################################

### ------------------------------ ###
[gcode_macro _SEARCH_VARS]
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}

### ------------------------------ ###
# variable save at end
[gcode_macro _SAVE_AT_END]
variable_save: 1
gcode:
  SET_GCODE_VARIABLE MACRO=SAVE_AT_END VARIABLE=save VALUE=1

### ------------------------------ ###  
# variable saving if set
[gcode_macro _SAVE_IF_SET]
gcode:
  {% if printer["gcode_macro _SAVE_AT_END"].save == 1 %}
    SAVE_CONFIG
  {% endif %}

### ------------------------------ ###
#variable initialization
[gcode_macro _INITIALIZE_VARIABLE]
gcode:
  {% if 'VARIABLE' not in params %}
    {action_respond_info("Missing VARIABLE parameter")}
  {% elif 'VALUE' not in params %}
    {action_respond_info("Missing VALUE parameter")}
  {% else %}
    {% set svv = printer.save_variables.variables %}
    {% if params.VARIABLE not in svv %}
      {% set escaped = params.VALUE|replace("\"", "\\\"") %}
      SAVE_VARIABLE VARIABLE={params.VARIABLE} VALUE="{escaped}"
    {% endif %}
  {% endif %}